diff -crB ./dosbox-0.74-3/configure ./dosbox-0.74-3-vcs/configure
*** ./dosbox-0.74-3/configure	2019-06-26 17:55:12.000000000 +0300
--- ./dosbox-0.74-3-vcs/configure	2022-08-01 03:56:51.211615000 +0300
***************
*** 2482,2487 ****
--- 2482,2489 ----
  ## Main body of script. ##
  ## -------------------- ##
  
+ LIBS="-lrt $LIBS"
+ 
  ac_ext=c
  ac_cpp='$CPP $CPPFLAGS'
  ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
diff -crB ./dosbox-0.74-3/src/gui/sdlmain.cpp ./dosbox-0.74-3-vcs/src/gui/sdlmain.cpp
*** ./dosbox-0.74-3/src/gui/sdlmain.cpp	2019-06-26 17:56:44.000000000 +0300
--- ./dosbox-0.74-3-vcs/src/gui/sdlmain.cpp	2022-09-27 02:50:47.670811818 +0300
***************
*** 221,226 ****
--- 221,299 ----
  
  static SDL_Block sdl;
  
+ // Memory interface with VCS.
+ #include <sys/mman.h>
+ #include <sys/stat.h>
+ #include <fcntl.h>
+ #include <cassert>
+ static uint16_t *THS_MMAP_STATUS_BUF = NULL;
+ static uint16_t *THS_MMAP_SCREEN_BUF = NULL;
+ static bool THS_IS_SHARED_MEM_INIT = false;
+ static uint16_t* ths_acquire_shared_memory_buffer(const char *filename)
+ {
+ 	const int fileDesc = shm_open(filename, O_RDWR, 0666);
+ 	assert((fileDesc >= 0) && "VCS: Failed to open the shared memory file");
+ 
+ 	struct stat fileStat;
+ 	if (fstat(fileDesc, &fileStat) != 0)
+ 	{
+ 		perror("VCS: fstat() error");
+ 		assert(!"VCS: Failed to stat a shared memory file.");
+ 		return NULL;
+ 	}
+ 
+ 	uint16_t *const bufPtr = (uint16_t*)mmap(NULL, fileStat.st_size, 0666, MAP_SHARED, fileDesc, 0);
+ 	assert(bufPtr && "VCS: Failed to map the shared memory file");
+ 
+ 	printf("VCS: Acquired shared memory buffer %s (%u bytes) to %p\n", filename, fileStat.st_size, (void*)bufPtr);
+ 
+ 	return bufPtr;
+ }
+ static void ths_init_shared_memory_interface(void)
+ {
+ 	THS_MMAP_STATUS_BUF = ths_acquire_shared_memory_buffer("vcs_mmap_status");
+ 	THS_MMAP_SCREEN_BUF = ths_acquire_shared_memory_buffer("vcs_mmap_screen");
+ 	THS_IS_SHARED_MEM_INIT = 1;
+ 	
+ 	return;
+ }
+ static void ths_copy_frame_buffer(SDL_Block *sdl)
+ {
+	static unsigned droppedFrames = 0;
+
+ 	if (!THS_IS_SHARED_MEM_INIT)
+ 	{
+ 		ths_init_shared_memory_interface();
+ 	}
+ 
+ 	// If VCS hasn't yet finished processing the previous frame.
+ 	if (THS_MMAP_STATUS_BUF[4] != 0)
+ 	{
+		droppedFrames++;
+ 		return;
+ 	}
+	
+	THS_MMAP_STATUS_BUF[5] = droppedFrames;
+	droppedFrames = 0;
+ 
+ 	// Copy the screen's pixel data over to VCS.
+ 	if (sdl->opengl.framebuf)
+ 	{
+ 		const unsigned frameWidth = sdl->draw.width;
+ 		const unsigned frameHeight = sdl->draw.height;
+ 		
+ 		THS_MMAP_STATUS_BUF[0] = frameWidth;
+ 		THS_MMAP_STATUS_BUF[1] = frameHeight;
+ 
+ 		memcpy(THS_MMAP_SCREEN_BUF, sdl->opengl.framebuf, (frameHeight * sdl->opengl.pitch));
+ 	}
+ 
+ 	// Signal to VCS that DOSBox has given it a new frame.
+ 	THS_MMAP_STATUS_BUF[4] = 1;
+ 
+ 	return;
+ }
+ 
  #define SETMODE_SAVES 1  //Don't set Video Mode if nothing changes.
  #define SETMODE_SAVES_CLEAR 1 //Clear the screen, when the Video Mode is reused
  SDL_Surface* SDL_SetVideoMode_Wrap(int width,int height,int bpp,Bit32u flags){
***************
*** 239,245 ****
  		else {
  			glClearColor (0.0, 0.0, 0.0, 1.0);
  			glClear(GL_COLOR_BUFFER_BIT);
! 			SDL_GL_SwapBuffers();
  		}
  #else //C_OPENGL
  		SDL_FillRect(sdl.surface,NULL,SDL_MapRGB(sdl.surface->format,0,0,0));
--- 307,313 ----
  		else {
  			glClearColor (0.0, 0.0, 0.0, 1.0);
  			glClear(GL_COLOR_BUFFER_BIT);
! 			SDL_GL_SwapBuffers(); ths_copy_frame_buffer(&sdl);
  		}
  #else //C_OPENGL
  		SDL_FillRect(sdl.surface,NULL,SDL_MapRGB(sdl.surface->format,0,0,0));
***************
*** 713,719 ****
  
  		glClearColor (0.0, 0.0, 0.0, 1.0);
  		glClear(GL_COLOR_BUFFER_BIT);
! 		SDL_GL_SwapBuffers();
  		glClear(GL_COLOR_BUFFER_BIT);
  		glShadeModel (GL_FLAT);
  		glDisable (GL_DEPTH_TEST);
--- 781,787 ----
  
  		glClearColor (0.0, 0.0, 0.0, 1.0);
  		glClear(GL_COLOR_BUFFER_BIT);
! 		SDL_GL_SwapBuffers(); ths_copy_frame_buffer(&sdl);
  		glClear(GL_COLOR_BUFFER_BIT);
  		glShadeModel (GL_FLAT);
  		glDisable (GL_DEPTH_TEST);
***************
*** 947,953 ****
  				index++;
  			}
  			glCallList(sdl.opengl.displaylist);
! 			SDL_GL_SwapBuffers();
  		}
  		break;
  #endif
--- 1015,1021 ----
  				index++;
  			}
  			glCallList(sdl.opengl.displaylist);
! 			SDL_GL_SwapBuffers(); ths_copy_frame_buffer(&sdl);
  		}
  		break;
  #endif
***************
*** 1251,1257 ****
  	glBufferDataARB = (PFNGLBUFFERDATAARBPROC)SDL_GL_GetProcAddress("glBufferDataARB");
  	glMapBufferARB = (PFNGLMAPBUFFERARBPROC)SDL_GL_GetProcAddress("glMapBufferARB");
  	glUnmapBufferARB = (PFNGLUNMAPBUFFERARBPROC)SDL_GL_GetProcAddress("glUnmapBufferARB");
! 	const char * gl_ext = (const char *)glGetString (GL_EXTENSIONS);
  	if(gl_ext && *gl_ext){
  		sdl.opengl.packed_pixel=(strstr(gl_ext,"EXT_packed_pixels") != NULL);
  		sdl.opengl.paletted_texture=(strstr(gl_ext,"EXT_paletted_texture") != NULL);
--- 1319,1325 ----
  	glBufferDataARB = (PFNGLBUFFERDATAARBPROC)SDL_GL_GetProcAddress("glBufferDataARB");
  	glMapBufferARB = (PFNGLMAPBUFFERARBPROC)SDL_GL_GetProcAddress("glMapBufferARB");
  	glUnmapBufferARB = (PFNGLUNMAPBUFFERARBPROC)SDL_GL_GetProcAddress("glUnmapBufferARB");
! 	const char * gl_ext = NULL; // Force the use of sdl.opengl.framebuf.
  	if(gl_ext && *gl_ext){
  		sdl.opengl.packed_pixel=(strstr(gl_ext,"EXT_packed_pixels") != NULL);
  		sdl.opengl.paletted_texture=(strstr(gl_ext,"EXT_paletted_texture") != NULL);
